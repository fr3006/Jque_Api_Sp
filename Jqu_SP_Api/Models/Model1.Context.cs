//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Jqu_SP_Api.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class studentDBEntities : DbContext
    {
        public studentDBEntities()
            : base("name=studentDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<StudentMaster> StudentMasters { get; set; }
    
        public virtual ObjectResult<Select_Student_Result> Select_Student(Nullable<int> stdID)
        {
            var stdIDParameter = stdID.HasValue ?
                new ObjectParameter("StdID", stdID) :
                new ObjectParameter("StdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_Student_Result>("Select_Student", stdIDParameter);
        }
    
        public virtual int Select_StudentDelete(Nullable<int> stdID)
        {
            var stdIDParameter = stdID.HasValue ?
                new ObjectParameter("StdID", stdID) :
                new ObjectParameter("StdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Select_StudentDelete", stdIDParameter);
        }
    
        public virtual int Select_StudentUpdate(Nullable<int> stdID, string stdName, string email, string address, string phone)
        {
            var stdIDParameter = stdID.HasValue ?
                new ObjectParameter("StdID", stdID) :
                new ObjectParameter("StdID", typeof(int));
    
            var stdNameParameter = stdName != null ?
                new ObjectParameter("StdName", stdName) :
                new ObjectParameter("StdName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Select_StudentUpdate", stdIDParameter, stdNameParameter, emailParameter, addressParameter, phoneParameter);
        }
    
        public virtual ObjectResult<SelectAll_Result> SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAll_Result>("SelectAll");
        }
    
        public virtual int USP_Student_Delete(Nullable<int> stdID)
        {
            var stdIDParameter = stdID.HasValue ?
                new ObjectParameter("StdID", stdID) :
                new ObjectParameter("StdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Student_Delete", stdIDParameter);
        }
    
        public virtual ObjectResult<string> USP_Student_Insert(string stdName, string email, string phone, string address)
        {
            var stdNameParameter = stdName != null ?
                new ObjectParameter("StdName", stdName) :
                new ObjectParameter("StdName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_Student_Insert", stdNameParameter, emailParameter, phoneParameter, addressParameter);
        }
    
        public virtual ObjectResult<USP_Student_Select_Result> USP_Student_Select(Nullable<int> stdId)
        {
            var stdIdParameter = stdId.HasValue ?
                new ObjectParameter("StdId", stdId) :
                new ObjectParameter("StdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Student_Select_Result>("USP_Student_Select", stdIdParameter);
        }
    
        public virtual ObjectResult<USP_Student_Select_all_Result> USP_Student_Select_all()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Student_Select_all_Result>("USP_Student_Select_all");
        }
    
        public virtual ObjectResult<string> USP_Student_Update(Nullable<int> stdID, string stdName, string email, string phone, string address)
        {
            var stdIDParameter = stdID.HasValue ?
                new ObjectParameter("StdID", stdID) :
                new ObjectParameter("StdID", typeof(int));
    
            var stdNameParameter = stdName != null ?
                new ObjectParameter("StdName", stdName) :
                new ObjectParameter("StdName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_Student_Update", stdIDParameter, stdNameParameter, emailParameter, phoneParameter, addressParameter);
        }
    }
}
